:py:mod:`danrerlib.enrichment`
==============================

.. py:module:: danrerlib.enrichment

.. autoapi-nested-parse::

   Enrichment Module
   =================

   The Enrichment module offers a collection of functions to perform gene enrichment analyses. These analyses allow you to identify overrepresented gene sets or concepts in a given set of genes compared to a background or universe of genes. The module supports various enrichment databases, methods, and organisms, making it a versatile tool for uncovering biological insights.

   Functions:
       - ``enrich_GO``: Perform Gene Ontology (GO) enrichment analysis.
       - ``enrich_KEGG``: Conduct enrichment analysis using the Kyoto Encyclopedia of Genes and Genomes (KEGG) database.
       - ``logistic``: Perform gene enrichment using logistic regression.
       - ``fishers``: Perform gene enrichment using Fisher's exact test.

   Constants:
       - ``NCBI_ID``: Identifier for NCBI Gene ID.
       - ``ZFIN_ID``: Identifier for ZFIN ID.
       - ``ENS_ID``: Identifier for Ensembl ID.
       - ``SYMBOL``: Identifier for gene Symbol.
       - ``HUMAN_ID``: Identifier for Human NCBI Gene ID.

   Notes:
       - The Enrichment module is designed for conducting gene enrichment analyses using various databases and methods.
       - It provides functions to analyze gene sets in the context of Gene Ontology (GO) and Kyoto Encyclopedia of Genes and Genomes (KEGG) concepts.
       - Users can choose from different gene ID types and organisms for analysis, enhancing flexibility.
       - The module includes statistical methods such as logistic regression and Fisher's exact test for enrichment analysis.

   Example:
       To perform GO enrichment analysis for a set of zebrafish genes:
       
       ``results = enrich_GO(gene_universe, gene_id_type=ZFIN_ID, database='BP', concept_ids=['GO:0007582'], org='dre')``

       This example retrieves genes associated with the specified GO concept ID ('GO:0007582') for zebrafish genes (org='dre').

   For comprehensive details on each function and usage examples, please consult the documentation. You can also find tutorials demonstrating the full functionality of the Enrichment module.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   danrerlib.enrichment.logistic
   danrerlib.enrichment.fishers
   danrerlib.enrichment.enrich_KEGG
   danrerlib.enrichment.enrich_GO



.. py:function:: logistic(gene_universe: danrerlib.settings.pd.DataFrame, gene_set: danrerlib.settings.pd.DataFrame, gene_id_type: str, concept_type: str, concept_id: str, concept_name: str, sig_cutoff=0.05) -> danrerlib.settings.pd.DataFrame

   Perform gene enrichment analysis using the logistic regression method.

   Parameters:
       - ``gene_universe (pd.DataFrame)``: A DataFrame representing the universe of genes.
       - ``gene_set (pd.DataFrame)``: A DataFrame containing the genes of interest.
       - ``gene_id_type (str)``: The type of gene identifier used in the DataFrames.
       - ``concept_type (str)``: The type of concept (e.g., GO term) being analyzed.
       - ``concept_id (str)``: The ID of the concept being analyzed.
       - ``concept_name (str)``: The name or description of the concept being analyzed.
       - ``sig_cutoff (float, optional)``: The significance cutoff for gene inclusion. Default is 0.05.

   Returns:
       - ``df (pd.DataFrame)``: A DataFrame containing enrichment analysis results, including concept details,
       the number of genes in the concept in the universe, the number of significant genes belonging
       to the concept, the proportion of genes in the concept, the coefficient, p-value, false discovery
       rate (FDR)-adjusted p-value, odds ratio, and enrichment status ('enriched' or 'depleted').

   Notes:
       - This function performs gene enrichment analysis using logistic regression.
       - It calculates enrichment statistics for a specified concept (e.g., GO term) by comparing a gene set
         of interest to a larger gene universe.
       - The 'gene_id_type' parameter specifies the type of gene identifiers used in the DataFrames.
       - The 'sig_cutoff' parameter sets the significance cutoff for gene inclusion based on p-values.
       - Enrichment results include the coefficient (slope) of the logistic regression, p-value,
         FDR-adjusted p-value, odds ratio, and enrichment status.


.. py:function:: fishers(gene_universe: danrerlib.settings.pd.DataFrame, gene_set: danrerlib.settings.pd.DataFrame, concept_type: str, concept_id: str, concept_name: str, sig_cutoff=0.05)

   Perform gene enrichment analysis using Fisher's exact test.

   Parameters:
       - ``gene_universe (pd.DataFrame)``: A DataFrame representing the universe of genes.
       - ``gene_set (pd.DataFrame)``: A DataFrame containing the genes of interest.
       - ``concept_type (str)``: The type of concept (e.g., KEGG pathway, GO term) being analyzed.
       - ``concept_id (str)``: The ID of the concept being analyzed (e.g., KEGG pathway ID).
       - ``concept_name (str)``: The name or description of the concept being analyzed.
       - ``sig_cutoff (float, optional)``: The significance cutoff for gene inclusion. Default is 0.05.

   Returns:
       - ``df (pd.DataFrame)``: A DataFrame containing enrichment analysis results, including concept details,
       the number of genes in the concept in the universe, the number of significant genes belonging
       to the concept, the proportion of genes in the concept, p-value, odds ratio, and enrichment direction.

   Notes:
       - This function performs gene enrichment analysis using Fisher's exact test.
       - It calculates enrichment statistics for a specified concept (e.g., KEGG pathway) by comparing a gene set
         of interest to a larger gene universe.
       - The 'sig_cutoff' parameter sets the significance cutoff for gene inclusion based on p-values.
       - Enrichment results include p-value, odds ratio, and enrichment direction ('enriched' or 'depleted').


.. py:function:: enrich_KEGG(gene_universe: str, gene_id_type=NCBI_ID, database='pathway', concept_ids=None, org='dre', method='logistic', sig_gene_cutoff_pvalue=0.05, sig_conceptID_cutoff_pvalue=None, sig_conceptID_cutoff_FDR=None, order_by_p_value=True)

   Perform gene enrichment analysis using KEGG pathway or disease databases.

   Parameters:
       - ``gene_universe (pd.DataFrame)``: A DataFrame containing gene information, including gene IDs, p-values, and log2FC.
       - ``gene_id_type (str, optional)``: The type of gene ID in the gene universe. Default is NCBI Gene ID (NCBI_ID).
       - ``database (str, optional)``: The KEGG database to use ('pathway' or 'disease'). Default is 'pathway'.
       - ``concept_ids (list, optional)``: A list of concept IDs (e.g., pathway IDs or disease IDs) to analyze. Default is None.
       - ``org (str, optional)``: The organism code ('dre' for zebrafish, 'dreM' for mapped zebrafish, 'hsa' for human). Default is 'dre'.
       - ``method (str, optional):`` The enrichment analysis method ('logistic' or 'fishers'). Default is 'logistic'.
       - ``sig_gene_cutoff_pvalue (float, optional)``: The significance cutoff for gene inclusion based on p-values. Default is 0.05.
       - ``sig_conceptID_cutoff_pvalue (float, optional)``: The significance cutoff for concept IDs based on p-values. Default is None.
       - ``sig_conceptID_cutoff_FDR (float, optional)``: The significance cutoff for concept IDs based on FDR (only for 'logistic' method). Default is None.
       - ``order_by_p_value (bool, optional)``: Whether to order the results by p-value. Default is True.

   Returns:
       - ``result (pd.DataFrame)``: A DataFrame containing enrichment analysis results, including concept details, the number of genes in the concept in the universe,
       the number of significant genes belonging to the concept, the proportion of genes in the concept, p-value, odds ratio, and enrichment direction.

   Notes:
       - This function performs gene enrichment analysis using the KEGG pathway or disease database.
       - It supports two enrichment analysis methods: 'logistic' and 'fishers'.
       - The 'sig_gene_cutoff_pvalue' parameter sets the significance cutoff for gene inclusion based on gene p-values.
       - The 'sig_conceptID_cutoff_pvalue' parameter can be used to filter concept IDs based on their p-values.
       - The 'sig_conceptID_cutoff_FDR' parameter is applicable when using the 'logistic' method and filters concept IDs based on FDR.
       - The 'order_by_p_value' parameter determines whether to order the results by p-value.


.. py:function:: enrich_GO(gene_universe: str, gene_id_type=ZFIN_ID, database=None, concept_ids=None, org='dre', method='logistic', sig_gene_cutoff_pvalue=0.05, sig_conceptID_cutoff_pvalue=None, sig_conceptID_cutoff_FDR=None, order_by_p_value=True)

   Perform gene enrichment analysis using Gene Ontology (GO) databases.

   Parameters:
       - ``gene_universe (pd.DataFrame)``: A DataFrame containing gene information, including gene IDs, p-values, and log2FC.
       - ``gene_id_type (str, optional)``: The type of gene ID in the gene universe. Default is ZFIN ID (ZFIN_ID).
       - ``database (str, optional)``: The GO database to use ('BP' for Biological Processes, 'CC' for Cellular Component, 'MF' for Molecular Function). Default is None.
       - ``concept_ids (list, optional)``: A list of GO concept IDs to analyze. Default is None.
       - ``org (str, optional)``: The organism code ('dre' for zebrafish, 'hsa' for human). Default is 'dre'.
       - ``method (str, optional)``: The enrichment analysis method ('logistic' or 'fishers'). Default is 'logistic'.
       - ``sig_gene_cutoff_pvalue (float, optional)``: The significance cutoff for gene inclusion based on p-values. Default is 0.05.
       - ``sig_conceptID_cutoff_pvalue (float, optional)``: The significance cutoff for concept IDs based on p-values. Default is None.
       - ``sig_conceptID_cutoff_FDR (float, optional)``: The significance cutoff for concept IDs based on FDR (only for 'logistic' method). Default is None.
       - ``order_by_p_value (bool, optional)``: Whether to order the results by p-value. Default is True.

   Returns:
       - ``result (pd.DataFrame)``: A DataFrame containing enrichment analysis results, including concept details, the number of genes in the concept in the universe,
       the number of significant genes belonging to the concept, the proportion of genes in the concept, p-value, odds ratio, and enrichment direction.

   Notes:
       - This function performs gene enrichment analysis using the Gene Ontology (GO) databases.
       - It supports two enrichment analysis methods: 'logistic' and 'fishers'.
       - The 'sig_gene_cutoff_pvalue' parameter sets the significance cutoff for gene inclusion based on gene p-values.
       - The 'sig_conceptID_cutoff_pvalue' parameter can be used to filter concept IDs based on their p-values.
       - The 'sig_conceptID_cutoff_FDR' parameter is applicable when using the 'logistic' method and filters concept IDs based on FDR.
       - The 'order_by_p_value' parameter determines whether to order the results by p-value.


