{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Orthology Mapping\n",
    "\n",
    "Author: Ashley Schwartz\n",
    "\n",
    "Date: September 2023\n",
    "\n",
    "## Purpose and Background\n",
    "\n",
    "This tutorial goes over how to get the zebrafish or human gene orthologs from one organism to another. Gene orthology is useful when you want to determine which genes in zebrafish map to genes in the human genome and vice versa. As this is a zebrafish library, there are four different Gene ID options available. Human Gene IDs are only reported as NCBI Entrez Gene IDs. The Gene ID options are:\n",
    "\n",
    "| Gene ID Name | Description | Example | Notes |\n",
    "|--|--|--|--|\n",
    "| ZFIN ID | ZFIN gene id: always starts with 'ZDB' for zebafish database | ZDB-GENE-011219-1 | used as the \"master\" gene id ([link](https://zfin.org/))|\n",
    "| NCBI Gene ID | integer gene id managed by NCBI: also known as Entrez Gene ID | 140634 | [link](https://www.ncbi.nlm.nih.gov/gene?Db=gene&Cmd=DetailsSearch&Term=140634) |\n",
    "| Symbol | descriptive symbol/name: RefSeq symbol used in RefSeq genome build | cyp1a | nomenclature defined by ZFIN |\n",
    "| Ensembl Gene ID | Ensembl database gene id: always starts with 'ENSDAR'| ENSDARG00000098315 | [link](http://useast.ensembl.org/Danio_rerio/Location/View?g=ENSDARG00000098315;r=18:5588068-5598958) |\n",
    "|Human NCBI Gene ID | integer gene id managed by NCBI: also known as Entrez Gene ID | 1543 | [link](https://www.ncbi.nlm.nih.gov/gene/1543) |\n",
    "\n",
    "## Requirements\n",
    "\n",
    "In this tutorial we will be utilizing two key elements:\n",
    "- a sample Gene ID list (format: .csv, .tsv, .txt) for reading in the Gene IDs, otherwise typing or copy/pasting Gene IDs is also supported. The Gene ID list can either be zebrafish Gene IDs in any of the supported formats or human Gene IDs in NCI Entrez format.\n",
    "    - the human gene list we will be using is located in the data/test_data subdirectory of this current working directory with relative path `data/test_data/hsa04911.txt`\n",
    "    - the zebrafish gene list we will be using is located in the same subdirectory with relative path `data/test_data/dre04910.txt`\n",
    "- the required python package\n",
    "    - See installation instructions if not already installed.\n",
    "\n",
    "In general, while you do not need a large foundation in Python to execute the code listed in this tutorial, a general understanding of absolute and relative paths is useful.\n",
    "\n",
    "_note: the Gene IDs are spelling and case sensitive_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# IMPORT PYTHON PACKAGE\n",
    "# ---------------------\n",
    "from danrerlib import mapping, utils\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Execute Orthology Mappings\n",
    "\n",
    "Gathering human and zebrafish orthology are especially useful when a mechanism has been characterized in humans but has yet to be looked at in zebrafish. We know that approximately 70% of human genes have zebrafish orthologs, meaning 70% of human genes also exist in zebrafish. We can use this to our advantage in various research scenarios. In some cases, you might just be interested in gathering the orthologs from a few genes. In other scenarios, you might want to get the orthology for a large list of genes. We will go through a variety of those scenarios here. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Simple Case: Get orthologs\n",
    "\n",
    "_Purpose: given a small list Gene IDs that are of type A in organism x, convert to Gene ID type A in organism B._\n",
    "\n",
    "The simple case is useful for a quick ortholog investigation if you have a small list you can easily paste. \n",
    "\n",
    "#### Zebrafish to Human\n",
    "\n",
    "__Step 1__: Define your list of Gene IDs. In this case, you would have a list of Gene IDs in any of the supported zebrafish formats. I named the python list `list_of_zfish_ids` and included all the Gene IDs I want to find human orthologs for. I chose to use ZFIN IDs here, but any of the supported zebrafish Gene ID types will suffice. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "list_of_zfish_ids = ['ZDB-GENE-081113-5', 'ZDB-GENE-031002-50', \n",
    "                     'ZDB-GENE-120104-7', 'ZDB-GENE-000607-16', \n",
    "                     'ZDB-GENE-060503-934', 'ZDB-GENE-050320-72', \n",
    "                     'ZDB-GENE-030131-3147', 'ZDB-GENE-040426-2551']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Step 2:__ Tell the program which gene type you currently have. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "zfish_gene_type = 'ZFIN ID'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Step 3:__ Launch the conversion function to get your ids converted to human Gene IDs. Note that the only supported Gene ID type for humans is the Human NCBI Gene ID, aka Entrez Gene ID. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "human_ids = mapping.convert_to_human(list_of_zfish_ids, zfish_gene_type)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Step 4:__ To visualize the human ids that have been converted from zebrafish ids, you can either print them to the python shell or save them to a file. If you would like to print them you can use the `print_series_pretty` function in the `utils` module."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4293\n",
      "81553\n",
      "26207\n",
      "605\n",
      "4861\n",
      "55022\n",
      "221143\n"
     ]
    }
   ],
   "source": [
    "utils.pretty_print_series(human_ids)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you would rather save the data to a file, you can save `human_ids` to a file name called `human_ids.txt` in the output data directory we defined previously. For some default options, you can use the `save_series` function in the `utils` module. Feel free to change the output directory to any folder of your choice.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "file_name = 'data/out_data/human_ids.txt'\n",
    "utils.save_data(human_ids, file_name)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Human to Zebrafish\n",
    "\n",
    "To convert from human Gene IDs to zebrafish, you follow the same steps except we will use the `convert_to_zebrafish` function in the `mapping module."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Step 1:__ Define your list of Gene IDs. Reminder again that the only supported human Gene ID type is currently NCBI Gene ID. These are also known as Entrez Gene IDs and are of integer format. My list of Gene IDs is names `list_of_human_ids`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "list_of_human_ids = [55585, 23191, 4192, 5686, \n",
    "                     197021, 390, 344805, 2623]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Step 2:__ Tell the program which zebrafish Gene ID type you would like to convert to. I will choose the Symbol Gene ID type for this example. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "zfish_desired_gene_id_type = 'Symbol'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Step 3:__ Launch the conversion function for human to zebrafish. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "zebrafish_ids = mapping.convert_to_zebrafish(list_of_human_ids, zfish_desired_gene_id_type)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Step 4:__ Print results to shell or save the results to a file. I will just print the results here using the `pretty_print_series` function in the `utils` module. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mdkb\n",
      "cyfip1\n",
      "psma5\n",
      "lctla\n",
      "rnd3b\n",
      "ube2q1\n",
      "gata1a\n",
      "mdka\n",
      "lctlb\n",
      "gata1b\n",
      "tmprss7\n"
     ]
    }
   ],
   "source": [
    "utils.pretty_print_series(zebrafish_ids)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you take a closer look, you will notice that the number of genes we started with does not always match what we will end up with. There is not a 1:1 mapping of genes between human and zebrafish, as stated previously. In fact, zebrafish often have a lot of duplicate genes (e.g. an a and b gene where a human just has one). Therefore, it is often useful to keep the mapping to know which genes in fact have orthologs and which don't. To do this, it is better to add a column to an existing DataFrame. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Simple Case: Get Orthologs and Keep Mapping\n",
    "\n",
    "_Purpose: given a small list Gene IDs that are of type A in organism x, convert to Gene ID type A in organism B and keep mapping._\n",
    "\n",
    "#### Zebrafish to Human\n",
    "\n",
    "__Step 1__: Define your list of Gene IDs. In this case, you would have a list of Gene IDs in any of the supported zebrafish formats. I am using the same `list_of_zfish_ids` as before."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "list_of_zfish_ids = ['ZDB-GENE-081113-5', 'ZDB-GENE-031002-50', \n",
    "                     'ZDB-GENE-120104-7', 'ZDB-GENE-000607-16', \n",
    "                     'ZDB-GENE-060503-934', 'ZDB-GENE-050320-72', \n",
    "                     'ZDB-GENE-030131-3147', 'ZDB-GENE-040426-2551']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Step 2:__ Tell the program which gene type you currently have and that we want to keep the mapping."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "zfish_gene_type = 'ZFIN ID'\n",
    "keep_mapping = True"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Step 3:__ Launch the conversion function to get your ids converted to human Gene IDs. Note that the only supported Gene ID type for humans is the Human NCBI Gene ID, aka Entrez Gene ID. The `keep_mapping` variable is added here as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "human_ids = mapping.convert_to_human(list_of_zfish_ids, zfish_gene_type, keep_mapping)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Step 4:__ Print results to shell or save the results to a file. Both options are shown here. Notice the file name is specified."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ZFIN ID</th>\n",
       "      <th>Human NCBI Gene ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ZDB-GENE-081113-5</td>\n",
       "      <td>4293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ZDB-GENE-031002-50</td>\n",
       "      <td>81553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ZDB-GENE-120104-7</td>\n",
       "      <td>26207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ZDB-GENE-000607-16</td>\n",
       "      <td>605</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ZDB-GENE-060503-934</td>\n",
       "      <td>4861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>ZDB-GENE-050320-72</td>\n",
       "      <td>55022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ZDB-GENE-040426-2551</td>\n",
       "      <td>221143</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                ZFIN ID Human NCBI Gene ID\n",
       "0     ZDB-GENE-081113-5               4293\n",
       "1    ZDB-GENE-031002-50              81553\n",
       "2     ZDB-GENE-120104-7              26207\n",
       "3    ZDB-GENE-000607-16                605\n",
       "4   ZDB-GENE-060503-934               4861\n",
       "5    ZDB-GENE-050320-72              55022\n",
       "6  ZDB-GENE-040426-2551             221143"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "human_ids"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "file_path = 'data/out_data/human_ids_with_mapping.txt'\n",
    "utils.save_data(human_ids, file_path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you notice in this case, row 6 has a `NaN` value for the `Human NCBI Gene ID` column. This is because there is no ortholog to the zebrafish gene `ZDB-GENE-030131-3147` in humans. If in the further downstream analysis this isn't important to you, you can drop that row from the dataset. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ZFIN ID</th>\n",
       "      <th>Human NCBI Gene ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ZDB-GENE-081113-5</td>\n",
       "      <td>4293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ZDB-GENE-031002-50</td>\n",
       "      <td>81553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ZDB-GENE-120104-7</td>\n",
       "      <td>26207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ZDB-GENE-000607-16</td>\n",
       "      <td>605</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ZDB-GENE-060503-934</td>\n",
       "      <td>4861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>ZDB-GENE-050320-72</td>\n",
       "      <td>55022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ZDB-GENE-040426-2551</td>\n",
       "      <td>221143</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                ZFIN ID Human NCBI Gene ID\n",
       "0     ZDB-GENE-081113-5               4293\n",
       "1    ZDB-GENE-031002-50              81553\n",
       "2     ZDB-GENE-120104-7              26207\n",
       "3    ZDB-GENE-000607-16                605\n",
       "4   ZDB-GENE-060503-934               4861\n",
       "5    ZDB-GENE-050320-72              55022\n",
       "6  ZDB-GENE-040426-2551             221143"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "human_ids.dropna()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Or you could have ran the `convert_to_human` function with the `keep_missing_orthos` option as `False`, the default is `True`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ZFIN ID</th>\n",
       "      <th>Human NCBI Gene ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ZDB-GENE-081113-5</td>\n",
       "      <td>4293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ZDB-GENE-031002-50</td>\n",
       "      <td>81553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ZDB-GENE-120104-7</td>\n",
       "      <td>26207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ZDB-GENE-000607-16</td>\n",
       "      <td>605</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ZDB-GENE-060503-934</td>\n",
       "      <td>4861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>ZDB-GENE-050320-72</td>\n",
       "      <td>55022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ZDB-GENE-040426-2551</td>\n",
       "      <td>221143</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                ZFIN ID Human NCBI Gene ID\n",
       "0     ZDB-GENE-081113-5               4293\n",
       "1    ZDB-GENE-031002-50              81553\n",
       "2     ZDB-GENE-120104-7              26207\n",
       "3    ZDB-GENE-000607-16                605\n",
       "4   ZDB-GENE-060503-934               4861\n",
       "5    ZDB-GENE-050320-72              55022\n",
       "6  ZDB-GENE-040426-2551             221143"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "keep_mapping = True\n",
    "keep_missing_orthos = False\n",
    "mapping.convert_to_human(list_of_zfish_ids, zfish_gene_type, \n",
    "                         keep_mapping, keep_missing_orthos)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Human to Zebrafish\n",
    "\n",
    "The steps for human to zebrafish are nearly the same. The repeated steps are shown below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Human NCBI Gene ID</th>\n",
       "      <th>Symbol</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>55585</td>\n",
       "      <td>ube2q1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>23191</td>\n",
       "      <td>cyfip1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4192</td>\n",
       "      <td>mdkb</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4192</td>\n",
       "      <td>mdka</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5686</td>\n",
       "      <td>psma5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>197021</td>\n",
       "      <td>lctla</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>197021</td>\n",
       "      <td>lctlb</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>390</td>\n",
       "      <td>rnd3b</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>344805</td>\n",
       "      <td>tmprss7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2623</td>\n",
       "      <td>gata1b</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2623</td>\n",
       "      <td>gata1a</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Human NCBI Gene ID   Symbol\n",
       "0               55585   ube2q1\n",
       "1               23191   cyfip1\n",
       "2                4192     mdkb\n",
       "3                4192     mdka\n",
       "4                5686    psma5\n",
       "5              197021    lctla\n",
       "6              197021    lctlb\n",
       "7                 390    rnd3b\n",
       "8              344805  tmprss7\n",
       "9                2623   gata1b\n",
       "10               2623   gata1a"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_of_human_ids = [55585, 23191, 4192, 5686, \n",
    "                     197021, 390, 344805, 2623]\n",
    "\n",
    "zfish_desired_gene_id_type = 'Symbol'\n",
    "keep_mapping = True\n",
    "zebrafish_ids = mapping.convert_to_zebrafish(list_of_human_ids, \n",
    "                                             zfish_desired_gene_id_type, \n",
    "                                             keep_mapping)\n",
    "zebrafish_ids"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this case, every human gene has an ortholog in zebrafish. In fact, some of the human genes here have more than one zebrafish ortholog. For example, the `2623` gene has the zebrafish orthologs `gata1b` and `gata1a`. All orthologs are kept in this method. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get Orthologs for Genes from File"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "_Purpose: given a list of Gene IDs from a file that are of type A in organism x, convert to Gene ID type A in organism B and save to file._\n",
    "\n",
    "#### Zebrafish to Human\n",
    "\n",
    "__Step 1__: Read in your list of Gene IDs.  The data in the `test_data` sub-directory is in a `tsv` type format with a `.txt` extension. The `pandas` package can read this without an issue (same with `excel` or a `csv` file), we just need to specify the separator. `\\t` is really the best for this type of data. Note that any excel file or csv file should work here. I am using a file named `dre04910.txt` which is a list of zebrafish genes in the KEGG pathway `04910`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_file_path = 'data/test_data/dre04910.txt'\n",
    "data = pd.read_csv(data_file_path, sep='\\t')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To get a quick look at the data, we can print the first three table entries and some data stats:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 180 rows and 1 columns\n"
     ]
    }
   ],
   "source": [
    "# print first three lines\n",
    "data.head(3)\n",
    "rows, cols = data.shape\n",
    "print(f'There are {rows} rows and {cols} columns')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can see, this list of Gene IDs has 180 entries. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Step 2:__ Tell the program which Gene ID type you currently have."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "zfish_gene_type = 'NCBI Gene ID'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Step 3:__ Launch the conversion function to get your ids converted to human Gene IDs. Note that the only supported Gene ID type for humans is the Human NCBI Gene ID, aka Entrez Gene ID."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "human_ids = mapping.convert_to_human(data, zfish_gene_type)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Step 4:__ Print results to shell or save the results to a file. Both options are shown here. Notice the file name is specified."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 117 rows in this dataset.\n"
     ]
    }
   ],
   "source": [
    "human_ids.head(3)\n",
    "m = len(human_ids)\n",
    "print(f'There are {m} rows in this dataset.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By printing some of the stats as shown above, we see that we are left with 117 human genes. This means that out of the 180 zebrafish genes we had, we only have 117 human orthologs. This is expected as, if you recall, only approximately 70% of human genes have zebrafish orthologs. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "file_path = 'data/out_data/dre05910_human_genes.txt'\n",
    "utils.save_data(human_ids, file_path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Human to Zebrafish\n",
    "\n",
    "Below is a quick run-though of the human to zebrafish case. The dataset used is a file named `hsa04911.txt` which contains all human genes in the KEGG pathway 04911."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 86 rows in this dataset.\n"
     ]
    }
   ],
   "source": [
    "# read in data and print some stats\n",
    "data_file_path = 'data/test_data/hsa04911.txt'\n",
    "data = pd.read_csv(data_file_path, sep='\\t')\n",
    "m,n = data.shape\n",
    "print(f'There are {m} rows in this dataset.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# launch conversion\n",
    "desired_zfish_gene_type = 'NCBI Gene ID'\n",
    "zfish_ids = mapping.convert_to_zebrafish(data, zfish_gene_type)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    64272\n",
       "1    64269\n",
       "2    64267\n",
       "Name: NCBI Gene ID, dtype: object"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 113 rows in this dataset.\n"
     ]
    }
   ],
   "source": [
    "# print some results stats\n",
    "zfish_ids.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "m = len(zfish_ids)\n",
    "print(f\"There are {m} rows in this dataset.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get Orthologs for a Column of a Larger Dataset\n",
    "\n",
    "\n",
    "_Purpose: you have a dataset with columns x, y, z. Column x has Gene IDs in from organism $\\alpha$ in type A. You would like to get orthologs for these Gene IDs to organism $\\beta$ in type B while maintaining the information of columns y, z._\n",
    "\n",
    "In this scenario, you might have some data that looks like:\n",
    "\n",
    "| NCBI Gene ID | PValue | logFC | \n",
    "|-|-|-|\n",
    "| 100002263 | 2.3 | 0.03 | \n",
    "|... | ... | ... |\n",
    "\n",
    "and you might want to get something like:\n",
    "\n",
    "| NCBI Gene ID | Human NCBI Gene ID | PValue | logFC | \n",
    "|-|-|-|-|\n",
    "| 140615 |9415| 2.3 | 0.03 | \n",
    "|... | ... | ... |\n",
    "\n",
    "The information in the log2FC and PValue columns are essential to keep 'in order' with the GeneID column. It is often that in this scenario, you will have an entire gene set and will be dealing with a lot more data. Lets look at a test dataset for this case."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Step 1:__ Read in the data as done previously."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_file_path = 'data/test_data/example_diff_express_data.txt'\n",
    "data = pd.read_csv(data_file_path, sep='\\t')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To get a quick look at the data, we can print the first three table entries and some data stats:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NCBI Gene ID</th>\n",
       "      <th>PValue</th>\n",
       "      <th>logFC</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>100000006</td>\n",
       "      <td>0.792615</td>\n",
       "      <td>0.115009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>100000044</td>\n",
       "      <td>0.015286</td>\n",
       "      <td>0.803879</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>100000085</td>\n",
       "      <td>0.264762</td>\n",
       "      <td>0.267360</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   NCBI Gene ID    PValue     logFC\n",
       "0     100000006  0.792615  0.115009\n",
       "1     100000044  0.015286  0.803879\n",
       "2     100000085  0.264762  0.267360"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 5464 rows and 3 columns\n"
     ]
    }
   ],
   "source": [
    "# print first three lines\n",
    "data.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "rows, cols = data.shape\n",
    "print(f'There are {rows} rows and {cols} columns')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Step 2:__ Get Human Orthologs. To execute the mapping and add the column, we will use the `add_mapped_ortholg_column` function from the `mapping` module. We will give this function the data read in above, and we need to specify the `id_from` and `id_to` as before. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NCBI Gene ID</th>\n",
       "      <th>Human NCBI Gene ID</th>\n",
       "      <th>PValue</th>\n",
       "      <th>logFC</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>100000006</td>\n",
       "      <td>84561</td>\n",
       "      <td>0.792615</td>\n",
       "      <td>0.115009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>100000044</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.015286</td>\n",
       "      <td>0.803879</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>100000085</td>\n",
       "      <td>968</td>\n",
       "      <td>0.264762</td>\n",
       "      <td>0.267360</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  NCBI Gene ID Human NCBI Gene ID    PValue     logFC\n",
       "0    100000006              84561  0.792615  0.115009\n",
       "1    100000044                NaN  0.015286  0.803879\n",
       "2    100000085                968  0.264762  0.267360"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "id_from = 'NCBI Gene ID'\n",
    "id_to = 'Human NCBI Gene ID'\n",
    "new_data = mapping.add_mapped_ortholog_column(data, id_from, id_to)\n",
    "new_data.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Step 3:__ Save to file. You can save this dataframe to a file as done previously."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "file_name = 'data/out_data/ortholog_dataframe.txt'\n",
    "utils.save_data(new_data, file_name)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This concludes the mapping tutorial! In summary, the key functions in this library for mapping are:\n",
    "\n",
    "| function | purpose |\n",
    "| - | - | \n",
    "| convert_to_human | convert a list of Zebrafish Gene IDs to Human Gene IDs|\n",
    "| convert_to_zebrafish | convert a list of Human Gene IDs to Zebrafish Gene IDs |\n",
    "| add_mapped_ortholog_column | add a ortholog column of Gene IDs to an existing DataFrame|"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the human to zebrafish case, we see that we went from 86 Human NCBI Gene IDs to 113 zebrafish NCBI Gene IDs. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "bioinfo",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
